{
  "address": "0x8934e9AeC1A83e4B9b6163c325EC64dBcd1386eB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CryptoDevToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoDevTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokensSold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minEth",
          "type": "uint256"
        }
      ],
      "name": "cryptoDevTokenToEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintTokens",
          "type": "uint256"
        }
      ],
      "name": "ethToCryptoDevToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputReserve",
          "type": "uint256"
        }
      ],
      "name": "getAmountOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5aeec5d3812519d01583e9f2fe5f9201747e6bb82af91667a34c5e5b9dfa3f72",
  "receipt": {
    "to": null,
    "from": "0xc88A7040ADc5c9137Beeba7d985065ACB72b5f29",
    "contractAddress": "0x8934e9AeC1A83e4B9b6163c325EC64dBcd1386eB",
    "transactionIndex": 54,
    "gasUsed": "2189402",
    "logsBloom": "0x
    "blockHash": "0xafe82a6a82e78104781eacc82628d4485cfbd4fc8d3362e25419e4e908526377",
    "transactionHash": "0x5aeec5d3812519d01583e9f2fe5f9201747e6bb82af91667a34c5e5b9dfa3f72",
    "logs": [],
    "blockNumber": 8276530,
    "cumulativeGasUsed": "14670505",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x061EAF25b0aEC90E4256B8c34677dd71343C1298"
  ],
  "numDeployments": 1,
  "solcInputHash": "ba439549e5b50e9aeb00abbc940eb919",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CryptoDevToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoDevTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEth\",\"type\":\"uint256\"}],\"name\":\"cryptoDevTokenToEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintTokens\",\"type\":\"uint256\"}],\"name\":\"ethToCryptoDevToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReserve\",\"type\":\"uint256\"}],\"name\":\"getAmountOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getAmountOfTokens(uint256,uint256,uint256)\":{\"details\":\"swap will return the Eth/Crypto Dev token that would be returned to the user in the swap\"},\"getReserve()\":{\"details\":\"getReserve => amount of Crypto Dev Token held by th contract\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256)\":{\"notice\":\"liquidity in the form of ETH and Crypto DEV Tokens to our contract if cryptoDevTokenReserve os zero i.e first time someone adding liquidity then we don't need t0 maintain a ratio between tokens otherwise we would follow x*y=constant rule and taking care of slippage stuffs cryptoDevTokenAmount user can add/cryptoDevTokenReserve in the contract=(Eth sent by the user/Eth reserve in the contract) and after providing liquidity in the contract the amount of LP tokens that get minted is based on given ratio. The Ratio is (LP tokens to be sent to the user (liquidity) / totalSupply of LP tokens in contract) = =(Eth sent by the user) / (Eth reserve in the contract).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//imports\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Exchange is ERC20 {\\n    address public cryptoDevTokenAddress;\\n\\n    constructor(address _CryptoDevToken) ERC20(\\\"CryptoDev LP Token\\\", \\\"CDLP\\\") {\\n        require(\\n            _CryptoDevToken != address(0),\\n            \\\"Token Address Passed is null address so can't go ahead with this\\\"\\n        );\\n        cryptoDevTokenAddress = _CryptoDevToken;\\n    }\\n\\n    /**\\n     * @dev getReserve => amount of Crypto Dev Token held by th contract\\n     */\\n    function getReserve() public view returns (uint) {\\n        return ERC20(cryptoDevTokenAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * liquidity in the form of ETH and Crypto DEV Tokens to our contract\\n     * if cryptoDevTokenReserve os zero i.e first time someone adding liquidity then\\n     * we don't need t0 maintain a ratio between tokens\\n     * otherwise we would follow x*y=constant rule and taking care of slippage stuffs\\n     *\\n     * cryptoDevTokenAmount user can add/cryptoDevTokenReserve in the contract=(Eth sent by the user/Eth reserve in the contract)\\n     * and after providing liquidity in the contract the amount of LP tokens that get minted\\n     * is based on given ratio. The Ratio is\\n     * (LP tokens to be sent to the user (liquidity) / totalSupply of LP tokens in contract) =\\n     * =(Eth sent by the user) / (Eth reserve in the contract).\\n     *\\n     */\\n    //Adding Liquidity to Exchange\\n\\n    function addLiquidity(uint _amount) public payable returns (uint) {\\n        uint liquidity;\\n        uint ethBalance = address(this).balance;\\n\\n        uint cryptoDevTokenReserve = getReserve();\\n        ERC20 cryptoDevToken = ERC20(cryptoDevTokenAddress);\\n\\n        if (cryptoDevTokenReserve == 0) {\\n            cryptoDevToken.transferFrom(msg.sender, address(this), _amount);\\n            // Take the current ethBalance and mint `ethBalance` amount of LP tokens to the user.\\n            // `liquidity` provided is equal to `ethBalance` because this is the first time user\\n            // is adding `Eth` to the contract, so whatever `Eth` contract has is equal to the one supplied\\n            // by the user in the current `addLiquidity` call\\n            // `liquidity` tokens that need to be minted to the user on `addLiquidity` call should always be proportional\\n            // to the Eth specified by the user\\n            liquidity = ethBalance;\\n            _mint(msg.sender, liquidity);\\n            // _mint is ERC20.sol smart contract function to mint ERC20 tokens\\n        } else {\\n            uint ethReserve = ethBalance - msg.value;\\n            // Ratio should always be maintained so that there are no major price impacts when adding liquidity\\n            uint cryptoDevTokenAmount = (msg.value * cryptoDevTokenReserve) /\\n                (ethReserve);\\n            require(\\n                _amount >= cryptoDevTokenAmount,\\n                \\\"Amount of tokens sent is less than the minimum tokens required\\\"\\n            );\\n            // transfer only (cryptoDevTokenAmount user can add) amount of `Crypto Dev tokens` from users account\\n            // to the contract\\n\\n            cryptoDevToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                cryptoDevTokenAmount\\n            );\\n\\n            // (LP tokens to be sent to the user (liquidity)/ totalSupply of LP tokens in contract) = (Eth sent by the user)/(Eth reserve in the contract)\\n            // by some maths -> liquidity =  (totalSupply of LP tokens in contract * (Eth sent by the user))/(Eth reserve in the contract)\\n            liquidity = (totalSupply() * msg.value) / ethReserve;\\n            _mint(msg.sender, liquidity);\\n        }\\n\\n        return liquidity;\\n    }\\n\\n    //Now lets create a function for removing liquidity from the contract.\\n\\n    function removeLiquidity(uint _amount) public returns (uint, uint) {\\n        require(_amount > 0, \\\"amount should be >0\\\");\\n        uint ethReserve = address(this).balance;\\n        uint _totalSupply = totalSupply();\\n        uint ethAmount = (ethReserve * _amount) / _totalSupply;\\n\\n        uint cryptoDevTokenAmount = (getReserve() * _amount) / _totalSupply;\\n\\n        _burn(msg.sender, _amount);\\n        payable(msg.sender).transfer(ethAmount);\\n        // Transfer `cryptoDevTokenAmount` of Crypto Dev tokens from the contract to the user's wallet\\n\\n        ERC20(cryptoDevTokenAddress).transfer(msg.sender, cryptoDevTokenAmount);\\n        return (ethAmount, cryptoDevTokenAmount);\\n    }\\n\\n    //Next lets implement the swap functionality\\n    //Swap would go two ways. One way would be Eth to Crypto Dev tokens\\n    // and other would be Crypto Dev to Eth\\n\\n    //We will charge 1%. This means the amount of input tokens with\\n    // fees would equal Input amount with fees =\\n    // (input amount - (1*(input amount)/100)) = ((input amount)*99)/100\\n\\n    /**\\n     * @dev swap will return the Eth/Crypto Dev token that would be returned to the\\n     * user in the swap\\n     */\\n\\n    function getAmountOfTokens(\\n        uint256 inputAmount,\\n        uint256 inputReserve,\\n        uint256 outputReserve\\n    ) public pure returns (uint256) {\\n        require(inputReserve > 0 && outputReserve > 0, \\\"Invalid reserve\\\");\\n        //1% fee\\n        uint256 inputAmountWithFee = inputAmount * 99;\\n        uint256 numerator = inputAmountWithFee * outputReserve;\\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\\n        return numerator / denominator;\\n    }\\n\\n    //for ETh to CryptoToken\\n\\n    function ethToCryptoDevToken(uint _mintTokens) public payable {\\n        uint tokenReserve = getReserve();\\n\\n        uint256 tokenBought = getAmountOfTokens(\\n            msg.value,\\n            address(this).balance - msg.value,\\n            tokenReserve\\n        );\\n        require(tokenBought >= _mintTokens, \\\"insufficient output amount\\\");\\n        // Transfer the `Crypto Dev` tokens to the user\\n        ERC20(cryptoDevTokenAddress).transfer(msg.sender, tokenBought);\\n    }\\n\\n    //for Crypto Dev token to Eth\\n\\n    function cryptoDevTokenToEth(uint _tokensSold, uint _minEth) public {\\n        uint256 tokenReserve = getReserve();\\n        uint256 ethBought = getAmountOfTokens(\\n            _tokensSold,\\n            tokenReserve,\\n            address(this).balance\\n        );\\n        require(ethBought >= _minEth, \\\"insufficient output amount\\\");\\n        // Transfer `Crypto Dev` tokens from the user's address to the contract\\n\\n        ERC20(cryptoDevTokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _tokensSold\\n        );\\n        // send the `ethBought` to the user from the contract\\n        payable(msg.sender).transfer(ethBought);\\n    }\\n}\\n\",\"keccak256\":\"0x0d965c63959de9b70f6ef8d539e9fa7476dfc83483bb5ed742e202207a4c804c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002b6838038062002b688339818101604052810190620000379190620001ed565b6040518060400160405280601281526020017f43727970746f446576204c5020546f6b656e00000000000000000000000000008152506040518060400160405280600481526020017f43444c50000000000000000000000000000000000000000000000000000000008152508160039081620000b4919062000499565b508060049081620000c6919062000499565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001329062000607565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000629565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b58262000188565b9050919050565b620001c781620001a8565b8114620001d357600080fd5b50565b600081519050620001e781620001bc565b92915050565b60006020828403121562000206576200020562000183565b5b60006200021684828501620001d6565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002a157607f821691505b602082108103620002b757620002b662000259565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002e2565b6200032d8683620002e2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200037a620003746200036e8462000345565b6200034f565b62000345565b9050919050565b6000819050919050565b620003968362000359565b620003ae620003a58262000381565b848454620002ef565b825550505050565b600090565b620003c5620003b6565b620003d28184846200038b565b505050565b5b81811015620003fa57620003ee600082620003bb565b600181019050620003d8565b5050565b601f82111562000449576200041381620002bd565b6200041e84620002d2565b810160208510156200042e578190505b620004466200043d85620002d2565b830182620003d7565b50505b505050565b600082821c905092915050565b60006200046e600019846008026200044e565b1980831691505092915050565b60006200048983836200045b565b9150826002028217905092915050565b620004a4826200021f565b67ffffffffffffffff811115620004c057620004bf6200022a565b5b620004cc825462000288565b620004d9828285620003fe565b600060209050601f831160018114620005115760008415620004fc578287015190505b6200050885826200047b565b86555062000578565b601f1984166200052186620002bd565b60005b828110156200054b5784890151825560018201915060208501945060208101905062000524565b868310156200056b578489015162000567601f8916826200045b565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f546f6b656e204164647265737320506173736564206973206e756c6c2061646460008201527f7265737320736f2063616e277420676f20616865616420776974682074686973602082015250565b6000620005ef60408362000580565b9150620005fc8262000591565b604082019050919050565b600060208201905081810360008301526200062281620005e0565b9050919050565b61252f80620006396000396000f3fe6080604052600436106101095760003560e01c806370a08231116100955780639e7a2922116100645780639e7a2922146103ad578063a457c2d7146103d8578063a9059cbb14610415578063dd62ed3e14610452578063f0566bb71461048f57610109565b806370a08231146102ca5780637386479e1461030757806395d89b41146103445780639c8f9f231461036f57610109565b8063313ce567116100dc578063313ce567146101de578063395093511461020957806351c6590a1461024657806359bf5d39146102765780636c25a25a146102a157610109565b806306fdde031461010e578063095ea7b31461013957806318160ddd1461017657806323b872dd146101a1575b600080fd5b34801561011a57600080fd5b506101236104ab565b60405161013091906117c2565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b919061187d565b61053d565b60405161016d91906118d8565b60405180910390f35b34801561018257600080fd5b5061018b610560565b6040516101989190611902565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c3919061191d565b61056a565b6040516101d591906118d8565b60405180910390f35b3480156101ea57600080fd5b506101f3610599565b604051610200919061198c565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b919061187d565b6105a2565b60405161023d91906118d8565b60405180910390f35b610260600480360381019061025b91906119a7565b6105d9565b60405161026d9190611902565b60405180910390f35b34801561028257600080fd5b5061028b6107d7565b6040516102989190611902565b60405180910390f35b3480156102ad57600080fd5b506102c860048036038101906102c391906119d4565b61087a565b005b3480156102d657600080fd5b506102f160048036038101906102ec9190611a14565b6109c8565b6040516102fe9190611902565b60405180910390f35b34801561031357600080fd5b5061032e60048036038101906103299190611a41565b610a10565b60405161033b9190611902565b60405180910390f35b34801561035057600080fd5b50610359610ab5565b60405161036691906117c2565b60405180910390f35b34801561037b57600080fd5b50610396600480360381019061039191906119a7565b610b47565b6040516103a4929190611a94565b60405180910390f35b3480156103b957600080fd5b506103c2610cdc565b6040516103cf9190611acc565b60405180910390f35b3480156103e457600080fd5b506103ff60048036038101906103fa919061187d565b610d02565b60405161040c91906118d8565b60405180910390f35b34801561042157600080fd5b5061043c6004803603810190610437919061187d565b610d79565b60405161044991906118d8565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190611ae7565b610d9c565b6040516104869190611902565b60405180910390f35b6104a960048036038101906104a491906119a7565b610e23565b005b6060600380546104ba90611b56565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690611b56565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b5050505050905090565b600080610548610f32565b9050610555818585610f3a565b600191505092915050565b6000600254905090565b600080610575610f32565b9050610582858285611103565b61058d85858561118f565b60019150509392505050565b60006012905090565b6000806105ad610f32565b90506105ce8185856105bf8589610d9c565b6105c99190611bb6565b610f3a565b600191505092915050565b600080600047905060006105eb6107d7565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082036106af578073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161065993929190611bea565b6020604051808303816000875af1158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c9190611c4d565b508293506106aa3385611405565b6107cb565b600034846106bd9190611c7a565b905060008184346106ce9190611cae565b6106d89190611d1f565b90508088101561071d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071490611dc2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161075a93929190611bea565b6020604051808303816000875af1158015610779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d9190611c4d565b5081346107a8610560565b6107b29190611cae565b6107bc9190611d1f565b95506107c83387611405565b50505b83945050505050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108349190611acc565b602060405180830381865afa158015610851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108759190611df7565b905090565b60006108846107d7565b90506000610893848347610a10565b9050828110156108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf90611e70565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161093793929190611bea565b6020604051808303816000875af1158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190611c4d565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109c1573d6000803e3d6000fd5b5050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008083118015610a215750600082115b610a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5790611edc565b60405180910390fd5b6000606385610a6f9190611cae565b905060008382610a7f9190611cae565b9050600082606487610a919190611cae565b610a9b9190611bb6565b90508082610aa99190611d1f565b93505050509392505050565b606060048054610ac490611b56565b80601f0160208091040260200160405190810160405280929190818152602001828054610af090611b56565b8015610b3d5780601f10610b1257610100808354040283529160200191610b3d565b820191906000526020600020905b815481529060010190602001808311610b2057829003601f168201915b5050505050905090565b60008060008311610b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8490611f48565b60405180910390fd5b60004790506000610b9c610560565b90506000818684610bad9190611cae565b610bb79190611d1f565b905060008287610bc56107d7565b610bcf9190611cae565b610bd99190611d1f565b9050610be5338861155b565b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610c2b573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610c89929190611f68565b6020604051808303816000875af1158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190611c4d565b5081819550955050505050915091565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610d0d610f32565b90506000610d1b8286610d9c565b905083811015610d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5790612003565b60405180910390fd5b610d6d8286868403610f3a565b60019250505092915050565b600080610d84610f32565b9050610d9181858561118f565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610e2d6107d7565b90506000610e47343447610e419190611c7a565b84610a10565b905082811015610e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8390611e70565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ee9929190611f68565b6020604051808303816000875af1158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c9190611c4d565b50505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa090612095565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100f90612127565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110f69190611902565b60405180910390a3505050565b600061110f8484610d9c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611189578181101561117b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117290612193565b60405180910390fd5b6111888484848403610f3a565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f590612225565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361126d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611264906122b7565b60405180910390fd5b611278838383611728565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156112fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f590612349565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113ec9190611902565b60405180910390a36113ff84848461172d565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146b906123b5565b60405180910390fd5b61148060008383611728565b80600260008282546114929190611bb6565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115439190611902565b60405180910390a36115576000838361172d565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c190612447565b60405180910390fd5b6115d682600083611728565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561165c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611653906124d9565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161170f9190611902565b60405180910390a36117238360008461172d565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561176c578082015181840152602081019050611751565b60008484015250505050565b6000601f19601f8301169050919050565b600061179482611732565b61179e818561173d565b93506117ae81856020860161174e565b6117b781611778565b840191505092915050565b600060208201905081810360008301526117dc8184611789565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611814826117e9565b9050919050565b61182481611809565b811461182f57600080fd5b50565b6000813590506118418161181b565b92915050565b6000819050919050565b61185a81611847565b811461186557600080fd5b50565b60008135905061187781611851565b92915050565b60008060408385031215611894576118936117e4565b5b60006118a285828601611832565b92505060206118b385828601611868565b9150509250929050565b60008115159050919050565b6118d2816118bd565b82525050565b60006020820190506118ed60008301846118c9565b92915050565b6118fc81611847565b82525050565b600060208201905061191760008301846118f3565b92915050565b600080600060608486031215611936576119356117e4565b5b600061194486828701611832565b935050602061195586828701611832565b925050604061196686828701611868565b9150509250925092565b600060ff82169050919050565b61198681611970565b82525050565b60006020820190506119a1600083018461197d565b92915050565b6000602082840312156119bd576119bc6117e4565b5b60006119cb84828501611868565b91505092915050565b600080604083850312156119eb576119ea6117e4565b5b60006119f985828601611868565b9250506020611a0a85828601611868565b9150509250929050565b600060208284031215611a2a57611a296117e4565b5b6000611a3884828501611832565b91505092915050565b600080600060608486031215611a5a57611a596117e4565b5b6000611a6886828701611868565b9350506020611a7986828701611868565b9250506040611a8a86828701611868565b9150509250925092565b6000604082019050611aa960008301856118f3565b611ab660208301846118f3565b9392505050565b611ac681611809565b82525050565b6000602082019050611ae16000830184611abd565b92915050565b60008060408385031215611afe57611afd6117e4565b5b6000611b0c85828601611832565b9250506020611b1d85828601611832565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b6e57607f821691505b602082108103611b8157611b80611b27565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bc182611847565b9150611bcc83611847565b9250828201905080821115611be457611be3611b87565b5b92915050565b6000606082019050611bff6000830186611abd565b611c0c6020830185611abd565b611c1960408301846118f3565b949350505050565b611c2a816118bd565b8114611c3557600080fd5b50565b600081519050611c4781611c21565b92915050565b600060208284031215611c6357611c626117e4565b5b6000611c7184828501611c38565b91505092915050565b6000611c8582611847565b9150611c9083611847565b9250828203905081811115611ca857611ca7611b87565b5b92915050565b6000611cb982611847565b9150611cc483611847565b9250828202611cd281611847565b91508282048414831517611ce957611ce8611b87565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d2a82611847565b9150611d3583611847565b925082611d4557611d44611cf0565b5b828204905092915050565b7f416d6f756e74206f6620746f6b656e732073656e74206973206c65737320746860008201527f616e20746865206d696e696d756d20746f6b656e732072657175697265640000602082015250565b6000611dac603e8361173d565b9150611db782611d50565b604082019050919050565b60006020820190508181036000830152611ddb81611d9f565b9050919050565b600081519050611df181611851565b92915050565b600060208284031215611e0d57611e0c6117e4565b5b6000611e1b84828501611de2565b91505092915050565b7f696e73756666696369656e74206f757470757420616d6f756e74000000000000600082015250565b6000611e5a601a8361173d565b9150611e6582611e24565b602082019050919050565b60006020820190508181036000830152611e8981611e4d565b9050919050565b7f496e76616c696420726573657276650000000000000000000000000000000000600082015250565b6000611ec6600f8361173d565b9150611ed182611e90565b602082019050919050565b60006020820190508181036000830152611ef581611eb9565b9050919050565b7f616d6f756e742073686f756c64206265203e3000000000000000000000000000600082015250565b6000611f3260138361173d565b9150611f3d82611efc565b602082019050919050565b60006020820190508181036000830152611f6181611f25565b9050919050565b6000604082019050611f7d6000830185611abd565b611f8a60208301846118f3565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611fed60258361173d565b9150611ff882611f91565b604082019050919050565b6000602082019050818103600083015261201c81611fe0565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061207f60248361173d565b915061208a82612023565b604082019050919050565b600060208201905081810360008301526120ae81612072565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061211160228361173d565b915061211c826120b5565b604082019050919050565b6000602082019050818103600083015261214081612104565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061217d601d8361173d565b915061218882612147565b602082019050919050565b600060208201905081810360008301526121ac81612170565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061220f60258361173d565b915061221a826121b3565b604082019050919050565b6000602082019050818103600083015261223e81612202565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006122a160238361173d565b91506122ac82612245565b604082019050919050565b600060208201905081810360008301526122d081612294565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061233360268361173d565b915061233e826122d7565b604082019050919050565b6000602082019050818103600083015261236281612326565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061239f601f8361173d565b91506123aa82612369565b602082019050919050565b600060208201905081810360008301526123ce81612392565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061243160218361173d565b915061243c826123d5565b604082019050919050565b6000602082019050818103600083015261246081612424565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006124c360228361173d565b91506124ce82612467565b604082019050919050565b600060208201905081810360008301526124f2816124b6565b905091905056fea2646970667358221220e0f3b08883577b1547047cd2e2c3f56c2421981bce3451405fda3b2053d4a9e064736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getAmountOfTokens(uint256,uint256,uint256)": {
        "details": "swap will return the Eth/Crypto Dev token that would be returned to the user in the swap"
      },
      "getReserve()": {
        "details": "getReserve => amount of Crypto Dev Token held by th contract"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256)": {
        "notice": "liquidity in the form of ETH and Crypto DEV Tokens to our contract if cryptoDevTokenReserve os zero i.e first time someone adding liquidity then we don't need t0 maintain a ratio between tokens otherwise we would follow x*y=constant rule and taking care of slippage stuffs cryptoDevTokenAmount user can add/cryptoDevTokenReserve in the contract=(Eth sent by the user/Eth reserve in the contract) and after providing liquidity in the contract the amount of LP tokens that get minted is based on given ratio. The Ratio is (LP tokens to be sent to the user (liquidity) / totalSupply of LP tokens in contract) = =(Eth sent by the user) / (Eth reserve in the contract)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 718,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "cryptoDevTokenAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}